#include "structures.h"
#include <math.h>

void * merge(void* v){
	Strip** stripes = (Strip**) v;

	Strip* strip1 = stripes[0];
	Strip* strip2 = stripes[1];

	ItemL<int>* p = strip1->first;
	ItemL<int>* q = strip2->last;
	ItemL<int>* meio = strip1->last;

	LinkedList<int>* list = new LinkedList<int>();

	ItemL<int>* m1 = p;
	ItemL<int>* m2 = meio->next;

	while(m1 != NULL && m1 != meio->next || m2 != NULL && m2 != q->next){

		if( (m1 != NULL && m1 == meio->next) || ( m2 != NULL && m2->previous != q && ( m2->value < ((m1 == NULL) ? m2->value+1 : m1->value) )){
			list->add(m2->value);
			m2 = m2->next;
		}else{
			list->add(m1->value);
			m1 = m1->next;
		}
	}

	m1 = strip1->first;
	m2 = list->first;

	while(m1 != NULL && m2 != NULL){

		m1->value = m2->value;
		ItemL<int>* next = m2->next;

		free(m2);

		m1 = m1->next;
		m2 = next;

	}

	free(list);
}

void swap(ItemL<int>* a, ItemL<int>* b){
	int temp = a->value;
	a->value = b->value;
	b->value = temp;
}

void * mergea(Strip* strip1, Strip* strip2){
	Strip** stripes = new Strip*[2];
	stripes[0] = strip1;
	stripes[1] = strip2;

	merge((void*) stripes);
}

ItemL<int>* getMeio(Strip* strip){
	ItemL<int>* meio = strip->first;
	int i = 0;
	while(i<((strip->size/2))-1){
		i++;
		meio = meio->next;
	}

	return meio;
}

void * mergeSort(void* v){

	Strip* strip = (Strip*) v;
	ItemL<int>* meio = getMeio(strip);

	if(meio == NULL) return NULL;

	Strip* s1 = new Strip;
	Strip* s2 = new Strip;

	s1->first = strip->first;
	s1->last = meio;

	s2->first = meio->next;
	s2->last = strip->last;

	s1->size = strip->size/2;
	s2->size = strip->size/2;

	s1->list = s2->list = strip->list;

	if(strip->size > 1){
		mergeSort((void*) s1);
		mergeSort((void*) s2);
	}

	mergea(s1, s2);
	free(s1);
	free(s2);
}

void sort(LinkedList<int>* list, int ncpus){
	ItemL<int>* first = list->first;
	ItemL<int>* last = first;

	Strip* strips[ncpus];

	int stripSize = floor((float)list->size/(float)ncpus);

	for(int i = 0; i<ncpus; i++){
		for(int j = 0; j<stripSize && last->next != NULL ; j++){
			last = last->next;
		}

		Strip* strip = new Strip;
		strip->list = list;
		strip->first = first;
		strip->last = last;
		strip->size = stripSize;

		strips[i] = strip;

		// last = first;
		first = last->next;
		// last = first;
	}

	strips[ncpus-1]->last = list->last;

	pthread_t threads[ncpus];

	for(int i = 0; i<ncpus; i++){
		pthread_create(&threads[i], NULL, mergeSort, (void*) strips[i]);
	}

	for(int i = 0; i<ncpus; i++){
		pthread_join(threads[i], NULL);
	}

	while(ncpus > 1){

		Strip** stripes[ncpus/2];

		for(int i = 0; i<ncpus-1; i+=2){
			Strip** stripps = new Strip*[2];
			stripps[0] = strips[i];
			stripps[1] = strips[i+1];
			stripes[i/2] = stripps;
		}

		pthread_t mergeThreads[ncpus/2];

		for(int i = 0; i<ncpus/2; i++){
			pthread_create(&mergeThreads[i], NULL, merge, (void*) stripes[i]);
		}

		for(int i = 0; i<ncpus/2; i++){
			pthread_join(mergeThreads[i], NULL);
		}
		
		for(int i = 0; i<ncpus-1; i+=2){
			Strip* strip = new Strip;
			strip->first = strips[i]->first;
			strip->last = strips[i+1]->last;

			strips[i/2] = strip;
		}

		ncpus = ncpus/2;
	}

	for(ItemL<int>* a = list->first; a->next!=NULL; a=a->next){
		if(a->value > a->next->value){

			// cout << "checando (" << a->value << " , " << a->next->value << ")" << endl;

			Strip* s1 = new Strip;
			Strip* s2 = new Strip;

			s1->list = s2->list = list;
			
			s1->first = list->first;
			s1->last = a;

			s2->first = a->next;
			s2->last = list->last;

			mergea(s1, s2);

		}
	}
}

/*
void insertBefore(LinkedList<int>* list, ItemL<int>* a, ItemL<int>* b){

	// cout << a->value << " before " << b->value << endl;

	if(a == NULL || b == NULL || a == b) return;

	if(a == list->last){
		list->last = a->previous;
		if(a->previous != NULL)
			a->previous->next = NULL;	
	}

	if(a == list->first){
		list->first = a->next;
		a->next = a->previous;
	}

	if(a->previous != NULL)
		a->previous->next = a->next;
	if(a->next != NULL){
		a->next->previous = a->previous;
	}

	a->next = a->previous = NULL;

	if(b == list->first){
		list->first = a;
		a->next = b;
		b->previous = a;
	}else{
		b->previous->next = a;
		a->previous = b->previous;
		a->next = b;
		b->previous = a;
	}

}

void * quickSort(void* v){
	Strip* strip = (Strip*) v;
	ItemL<int>* p = strip->first;
	ItemL<int>* q = strip->last;

	int cont = 0;
	ItemL<int>* act = strip->first;
	while(act != strip->last){
		cont++;
		act = act->next;
	}

	if(cont > 1){
		ItemL<int>* pivot = part(p, q);

		if( pivot != p ){
			Strip* nstrip = new Strip;
			nstrip->list = strip->list;
			nstrip->first = p;
			nstrip->last = pivot->previous;
			quickSort(nstrip);

			free(nstrip);
		}
		if( pivot != q ){
			Strip* nstrip = new Strip;
			nstrip->list = strip->list;
			nstrip->first = pivot->next;
			nstrip->last = q;
			quickSort(nstrip);

			free(nstrip);
		}
	}
}

ItemL<int>* part(ItemL<int>* p, ItemL<int>* q){
	ItemL<int>* pivot = p;
	int value = pivot->value;

	ItemL<int>* i = p;
	ItemL<int>* f;

	for(f = p; f != q->next; f = f->next){

		if(f->value < value){
			i = i->next;
			swap(i, f);
		}
	}

	swap(i, p);

	return i;
}

*/
